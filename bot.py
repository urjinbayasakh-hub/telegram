import os
import openai
import telebot
from dotenv import load_dotenv

load_dotenv("bot.env")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = telebot.TeleBot(TELEGRAM_TOKEN)
openai.api_key = OPENAI_API_KEY

# -------------------------
# INTENT DETECTION FUNCTION
# -------------------------
def detect_intent(txt):
    t = txt.lower()

    if any(x in t for x in ["—Å–∞–π–Ω —É—É", "sain uu", "hi", "hello"]):
        return "greeting"

    if "–∞–Ω–≥–ª–∏" in t or "english" in t:
        return "learn_english"

    if any(x in t for x in ["speaking", "—è—Ä–∏—Ö", "—è—Ä—å–∂", "–≥–æ–≤–æ—Ä–∏—Ç—å"]):
        return "speaking"

    if any(x in t for x in ["“Ø–≥", "vocab", "vocabulary", "“Ø–≥ —Ü—ç—ç–∂", "word"]):
        return "vocab"

    return "fallback"

# -------------------------
# RESPONSE MESSAGES
# -------------------------
RESPONSE_GREETING = (
    "–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É! üëã\n"
    "–ë–∏ –∞–Ω–≥–ª–∏ —Ö—ç–ª —Å—É—Ä–∞—Ö–∞–¥ —Ç—É—Å–ª–∞—Ö —Ç—É—Å–ª–∞—Ö-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –±–∞–π–Ω–∞.\n\n"
    "–¢–∞ —è–≥ –æ–¥–æ–æ —é—É —Ö“Ø—Å—ç–∂ –±–∞–π–Ω–∞ –≤—ç? üòä\n"
    "1. –ê–Ω–≥–ª–∏ —Ö—ç–ª–Ω–∏–π “Ø–≥—Å —Å—É—Ä–º–∞–∞—Ä –±–∞–π–Ω–∞\n"
    "2. –Ø—Ä–∏–∞–Ω—ã —á–∞–¥–≤–∞—Ä–∞–∞ —Å–∞–π–∂—Ä—É—É–ª–º–∞–∞—Ä –±–∞–π–Ω–∞\n"
    "3. –®–∏–Ω—ç —ç—Ö–ª—ç–≥—á, —Ö–∞–∞–Ω–∞–∞—Å —ç—Ö–ª—ç—Ö—ç—ç –º—ç–¥—ç—Ö–≥“Ø–π –±–∞–π–Ω–∞\n\n"
    "–¢–æ—Ö–∏—Ä–æ—Ö –¥—É–≥–∞–∞—Ä—ã–≥ –±–∏—á—ç—ç–¥ —è–≤—É—É–ª–∞–∞—Ä–∞–π (–∂–∏—à—ç—ç: 3)"
)

RESPONSE_LEARN_ENGLISH = (
    "–°–∞–π–Ω —É—É! ü§ó –ê–Ω–≥–ª–∏ —Ö—ç–ª —Å—É—Ä–∞—Ö–∞–¥ —á–∏–Ω—å –±–∏ —Ç—É—Å–∞–ª–Ω–∞.\n\n"
    "–ß–∞–º–¥ —è–≥ –æ–¥–æ–æ –∞–ª—å –Ω—å —Ö—ç—Ä—ç–≥—Ç—ç–π –≤—ç? –î–æ–æ—Ä–æ–æ—Å —Å–æ–Ω–≥–æ–æ—Ä–æ–π üëá\n"
    "1Ô∏è‚É£ “Æ–≥ —Ü—ç—ç–∂–ª—ç—Ö (”©–¥”©—Ä—Ç 10 —à–∏–Ω—ç “Ø–≥ –∂–∏—à—ç—ç ”©–≥“Ø“Ø–ª–±—ç—Ä—Ç—ç–π)\n"
    "2Ô∏è‚É£ –Ø—Ä–∏—Ö –¥–∞–¥–ª–∞–≥–∞ (—á”©–ª”©”©—Ç—ç–π —è—Ä–∏—Ö–∞–¥ –∑–æ—Ä–∏—É–ª—Å–∞–Ω –∞—Å—É—É–ª—Ç—É—É–¥)\n"
    "3Ô∏è‚É£ –®–∞–ª–≥–∞–ª—Ç / —Ç“Ø–≤—à–∏–Ω —Ç–æ–≥—Ç–æ–æ—Ö (—á–∏–Ω–∏–π –æ–¥–æ–æ–≥–∏–π–Ω —Ç“Ø–≤—à–∏–Ω–≥ –æ–Ω–æ—à–ª–æ–æ–¥ –∑”©–≤–ª”©–º–∂ ”©–≥–Ω”©)\n\n"
    "–î—É–≥–∞–∞—Ä—ã–≥ –Ω—å –±–∏—á—ç—ç–¥ —è–≤—É—É–ª—á–∏—Ö: 1, 2 —ç—Å–≤—ç–ª 3 ‚úçÔ∏è"
)

RESPONSE_SPEAKING = (
    "–ì–∞–π—Ö–∞–ª—Ç–∞–π —Å–æ–Ω–≥–æ–ª—Ç üó£Ô∏è\n\n"
    "–Ø—Ä–∏—Ö —á–∞–¥–≤–∞—Ä—ã–≥ —Å–∞–π–∂—Ä—É—É–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ –±–∏–¥ –∏–Ω–≥—ç–∂ –∞–∂–∏–ª–ª–∞–Ω–∞:\n"
    "- –ë–∏ –∞—Å—É—É–ª—Ç –∞—Å—É—É–Ω–∞ (–∂–∏—à—ç—ç –Ω—å: \"”®–Ω”©”©–¥”©—Ä ”©–¥”©—Ä –Ω—å —è–º–∞—Ä –±–∞–π—Å–∞–Ω –±—ç?\")\n"
    "- –ß–∏ –±–æ–≥–∏–Ω–æ —Ö–∞—Ä–∏—É–ª—Ç –∞–Ω–≥–ª–∏–∞—Ä –±–∏—á–Ω—ç\n"
    "- –ë–∏ —á–∏–Ω–∏–π ”©–≥“Ø“Ø–ª–±—ç—Ä–∏–π–≥ –∑–∞—Å–∞–∂, –∏–ª“Ø“Ø natural —Ö—É–≤–∏–ª–±–∞—Ä —Å–∞–Ω–∞–ª –±–æ–ª–≥–æ–Ω–æ\n\n"
    "–ë—ç–ª—ç–Ω “Ø“Ø? üòé –¢—ç–≥–≤—ç–ª —ç—Ö–Ω–∏–π –∞—Å—É—É–ª—Ç:\n"
    "üëâ What did you do today?\n"
    "–ê–Ω–≥–ª–∏–∞—Ä 1-2 ”©–≥“Ø“Ø–ª–±—ç—Ä—ç—ç—Ä –±–∏—á—ç—ç–¥ —è–≤—É—É–ª. "
)

RESPONSE_VOCAB = (
    "“Æ–≥–Ω—ç—ç—Å –Ω—å —ç—Ö—ç–ª—å–µ üìö\n\n"
    "Day 1-–∏–π–Ω 3 “Ø–≥:\n"
    "1. improve ‚Äì —Å–∞–π–∂—Ä—É—É–ª–∞—Ö\n"
    "   Example: I want to improve my English.\n"
    "2. confident ‚Äì –∏—Ç–≥—ç–ª—Ç—ç–π, ”©”©—Ä—Ç”©”© –∏—Ç–≥—ç–ª—Ç—ç–π\n"
    "   Example: I feel confident when I speak English.\n"
    "3. practice ‚Äì –¥–∞–¥–ª–∞–≥–∞ —Ö–∏–π—Ö\n"
    "   Example: I practice English every day.\n\n"
    "–î–∞—Ö–∏–∞–¥ 3 “Ø–≥ –∞–≤–∞—Ö —É—É? \"—Ç—ç–≥—å–µ\" –≥—ç–∂ –±–∏—á—ç—ç—Ä—ç–π üí™"
)

RESPONSE_FALLBACK = (
    "–°–∞–π–Ω —É—É! üòä –ë–∏ –∞–Ω–≥–ª–∏ —Ö—ç–ª —Å—É—Ä–∞—Ö–∞–¥ —á–∏–Ω—å —á–∏–≥–ª“Ø“Ø–ª—ç—Ö—ç—ç—Ä —ç–Ω–¥ –±–∞–π–Ω–∞.\n\n"
    "–î–æ–æ—Ä—Ö —Å–æ–Ω–≥–æ–ª—Ç–æ–æ—Å –∞–ª–∏–π–≥ –Ω—å —Ö“Ø—Å—ç–∂ –±–∞–π–Ω–∞ –≤—ç?\n"
    "1Ô∏è‚É£ “Æ–≥ —Ü—ç—ç–∂–ª—ç—Ö\n"
    "2Ô∏è‚É£ –Ø—Ä–∏–∞–Ω—ã –¥–∞–¥–ª–∞–≥–∞\n"
    "3Ô∏è‚É£ –¢“Ø–≤—à–∏–Ω —Ç–æ–≥—Ç–æ–æ—Ö —à–∞–ª–≥–∞–ª—Ç\n\n"
    "–ó”©–≤—Ö”©–Ω –¥—É–≥–∞–∞—Ä—ã–≥ –±–∏—á—ç—ç–¥ —è–≤—É—É–ª—á–∏—Ö üí¨"
)

# -------------------------
# MAIN HANDLER
# -------------------------
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_input = message.text.strip()
    intent = detect_intent(user_input)

    if intent == "greeting":
        reply = RESPONSE_GREETING
    elif intent == "learn_english":
        reply = RESPONSE_LEARN_ENGLISH
    elif intent == "speaking":
        reply = RESPONSE_SPEAKING
    elif intent == "vocab":
        reply = RESPONSE_VOCAB
    else:
        reply = RESPONSE_FALLBACK

    bot.send_message(message.chat.id, reply)

# -------------------------
# BOT START
# -------------------------
if __name__ == "__main__":
    print("ü§ñ Bot is running...")
    bot.infinity_polling()
