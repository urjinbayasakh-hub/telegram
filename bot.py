import os
import openai
import telebot
from dotenv import load_dotenv

# -------------------------
# –¢–û–•–ò–†–ì–û–û
# -------------------------
load_dotenv("bot.env")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = telebot.TeleBot(TELEGRAM_TOKEN)
openai.api_key = OPENAI_API_KEY

# -------------------------
# CONTEXT / STATE –•–ê–î–ì–ê–õ–ê–• MAP
# -------------------------
user_context = {}  # —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —á–∞—Ç —Ç“Ø“Ø—Ö
user_stage = {}    # —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –æ–¥–æ–æ–≥–∏–π–Ω —à–∞—Ç (e.g. placement test)

# -------------------------
# INTENT DETECTION
# -------------------------
def detect_intent(txt):
    t = txt.lower()

    if any(x in t for x in ["—Å–∞–π–Ω —É—É", "sain uu", "hi", "hello"]):
        return "greeting"

    if any(x in t for x in ["3", "—Ç“Ø–≤—à–∏–Ω", "test", "exam", "placement"]):
        return "placement_test"

    if "–∞–Ω–≥–ª–∏" in t or "english" in t:
        return "learn_english"

    if any(x in t for x in ["speaking", "—è—Ä–∏—Ö", "—è—Ä—å–∂", "–≥–æ–≤–æ—Ä–∏—Ç—å"]):
        return "speaking"

    if any(x in t for x in ["“Ø–≥", "vocab", "vocabulary", "“Ø–≥ —Ü—ç—ç–∂", "word"]):
        return "vocab"

    return "fallback"

# -------------------------
# READY-MADE RESPONSES
# -------------------------
RESPONSE_GREETING = (
    "–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É! üëã\n"
    "–ë–∏ –∞–Ω–≥–ª–∏ —Ö—ç–ª —Å—É—Ä–∞—Ö–∞–¥ —á–∏–Ω—å —Ç—É—Å–ª–∞—Ö AI –±–∞–≥—à –±–∞–π–Ω–∞.\n\n"
    "–¢–∞ —è–≥ –æ–¥–æ–æ —é—É —Ö“Ø—Å—ç–∂ –±–∞–π–Ω–∞ –≤—ç? üòä\n"
    "1Ô∏è‚É£ “Æ–≥ —Ü—ç—ç–∂–ª—ç—Ö\n"
    "2Ô∏è‚É£ –Ø—Ä–∏–∞–Ω—ã –¥–∞–¥–ª–∞–≥–∞\n"
    "3Ô∏è‚É£ –¢“Ø–≤—à–∏–Ω —Ç–æ–≥—Ç–æ–æ—Ö —à–∞–ª–≥–∞–ª—Ç\n\n"
    "–¢–æ—Ö–∏—Ä–æ—Ö –¥—É–≥–∞–∞—Ä—ã–≥ –±–∏—á—ç—ç–¥ —è–≤—É—É–ª–∞–∞—Ä–∞–π (–∂–∏—à—ç—ç: 3)"
)

RESPONSE_FALLBACK = (
    "–ë–∏ —Ç—É—Å–ª–∞—Ö–∞–¥ –±—ç–ª—ç–Ω –±–∞–π–Ω–∞ üòä\n"
    "–¢–∞ —è–≥ —é—É —Ö–∏–π—Ö–∏–π–≥ —Ö“Ø—Å—ç–∂ –±–∞–π–Ω–∞ –≤—ç?\n"
    "1Ô∏è‚É£ “Æ–≥ —Ü—ç—ç–∂–ª—ç—Ö\n"
    "2Ô∏è‚É£ –Ø—Ä–∏–∞–Ω—ã –¥–∞–¥–ª–∞–≥–∞\n"
    "3Ô∏è‚É£ –¢“Ø–≤—à–∏–Ω —Ç–æ–≥—Ç–æ–æ—Ö —à–∞–ª–≥–∞–ª—Ç"
)

# -------------------------
# LEVEL TEST QUESTIONS
# -------------------------
LEVEL_QUESTIONS = [
    "1Ô∏è‚É£ What time do you usually wake up?",
    "2Ô∏è‚É£ Complete this sentence: 'If I had more time, I ______.'",
    "3Ô∏è‚É£ Translate this: '–ë–∏ ”©–¥”©—Ä –±“Ø—Ä –∞–Ω–≥–ª–∏ —Ö—ç–ª —Å—É—Ä–¥–∞–≥.'",
    "4Ô∏è‚É£ Which is correct: 'He go to work' or 'He goes to work'?",
    "5Ô∏è‚É£ Write one short sentence about your favorite hobby."
]

# -------------------------
# MAIN HANDLER
# -------------------------
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.from_user.is_bot:
        return

    chat_id = message.chat.id
    user_input = message.text.strip()
    intent = detect_intent(user_input)

    # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω context —ç—Ö–ª“Ø“Ø–ª—ç—Ö
    if chat_id not in user_context:
        user_context[chat_id] = [
            {"role": "system", "content": (
                "–¢–∞ –∞–Ω–≥–ª–∏ —Ö—ç–ª —Å—É—Ä–∞–≥—á–∏–¥ —Ç—É—Å–∞–ª–¥–∞–≥ AI –±–∞–≥—à. "
                "–•–∞—Ä–∏—É–ª—Ç —á–∏–Ω—å –æ–π–ª–≥–æ–º–∂—Ç–æ–π, –Ω–∞–π—Ä—Å–∞–≥, —Ç–æ–≤—á, –∑–∞–∞–≤–∞—Ä–ª–∞–≥ –±–∞–π—Ö —ë—Å—Ç–æ–π. "
                "–ú–æ–Ω–≥–æ–ª —Ö—ç–ª—ç—ç—Ä —Ç–∞–π–ª–±–∞—Ä —Ö–∏–π–∂, –∞–Ω–≥–ª–∏ —Ö—ç–ª–Ω–∏–π –∂–∏—à—ç—ç–≥ –æ—Ä—É—É–ª. "
                "–•—ç—Ä–≤—ç—ç —Å—É—Ä–∞–≥—á —Ç“Ø–≤—à–∏–Ω —Ç–æ–≥—Ç–æ–æ—Ö —à–∞–ª–≥–∞–ª—Ç —Ö–∏–π—Å—ç–Ω –±–æ–ª, "
                "—Ç“Ø“Ø–Ω–∏–π —Ç“Ø–≤—à–∏–Ω–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–∂, —Ç“Ø“Ø–Ω–¥ —Ç–æ—Ö–∏—Ä—Å–æ–Ω –¥–∞—Ä–∞–∞–≥–∏–π–Ω —à–∞—Ç–Ω—ã —Å—É—Ä–≥–∞–ª—Ç—ã–Ω —Ç”©–ª”©–≤–ª”©–≥”©”© –≥–∞—Ä–≥–∞."
            )}
        ]

    # -------------------------
    # üéØ –¢“Æ–í–®–ò–ù –®–ê–õ–ì–ê–õ–¢–´–ù –ì–û–†–ò–ú
    # -------------------------
    if intent == "placement_test":
        user_stage[chat_id] = {"mode": "placement", "q_index": 0, "answers": []}
        bot.send_message(chat_id, "üéØ –ì–∞–π—Ö–∞–ª—Ç–∞–π! –¢“Ø–≤—à–∏–Ω–≥ —á–∏–Ω—å —à–∞–ª–≥–∞—Ü–≥–∞–∞—è.\n5 –∞—Å—É—É–ª—Ç –∞—Å—É—É–Ω–∞. –•–∞—Ä–∏—É–ª—Ç–∞–∞ –∞–Ω–≥–ª–∏–∞—Ä –±–∏—á—ç—ç—Ä—ç–π.\n")
        bot.send_message(chat_id, LEVEL_QUESTIONS[0])
        return

    # -------------------------
    # üß© –•—ç—Ä–≤—ç—ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á —Ç“Ø–≤—à–∏–Ω —à–∞–ª–≥–∞–ª—Ç–∞–Ω–¥–∞–∞ —Ö–∞—Ä–∏—É–ª–∂ –±–∞–π–≥–∞–∞ –±–æ–ª
    # -------------------------
    if chat_id in user_stage and user_stage[chat_id].get("mode") == "placement":
        stage = user_stage[chat_id]
        stage["answers"].append(user_input)
        stage["q_index"] += 1

        if stage["q_index"] < len(LEVEL_QUESTIONS):
            next_q = LEVEL_QUESTIONS[stage["q_index"]]
            bot.send_message(chat_id, next_q)
        else:
            # ‚úÖ 5 –∞—Å—É—É–ª—Ç—ã–Ω –¥–∞—Ä–∞–∞ —Ç“Ø–≤—à–∏–Ω –¥“Ø–≥–Ω—ç—Ö
            try:
                summary_prompt = (
                    "–°—É—Ä–∞–≥—á–∏–π–Ω —Ç“Ø–≤—à–∏–Ω —à–∞–ª–≥–∞–ª—Ç—ã–Ω —Ö–∞—Ä–∏—É–ª—Ç—É—É–¥—ã–≥ –¥“Ø–≥–Ω—ç. "
                    "–î–æ–æ—Ä—Ö —Ö–∞—Ä–∏—É–ª—Ç—É—É–¥—ã–≥ “Ø–Ω–¥—ç—Å–ª—ç—ç–¥ A1‚ÄìC1 —Ç“Ø–≤—à–∏–Ω–≥ —Ç–æ–≥—Ç–æ–æ–Ω —Ç–∞–π–ª–±–∞—Ä ”©–≥. "
                    "–¢“Ø–≤—à–∏–Ω —Ç–æ–≥—Ç–æ–æ—Å–Ω—ã –¥–∞—Ä–∞–∞ –¥–∞—Ä–∞–∞–≥–∏–π–Ω —à–∞—Ç–Ω—ã —Å—É—Ä–≥–∞–ª—Ç—ã–Ω —Ç”©–ª”©–≤–ª”©–≥”©”©–≥ –≥–∞—Ä–≥–∞: "
                    "”©”©—Ä”©”©—Ä —Ö—ç–ª–±—ç–ª, —Ç“Ø–≤—à–∏–Ω–¥ –Ω—å —Ç–æ—Ö–∏—Ä—Å–æ–Ω “Ø–≥—Å, —è—Ä–∏–∞–Ω—ã –¥–∞—Å–≥–∞–ª, –±–æ–≥–∏–Ω–æ –∑–æ—Ä–∏–ª–≥–æ —Å–∞–Ω–∞–ª –±–æ–ª–≥–æ. "
                    f"–•–∞—Ä–∏—É–ª—Ç—É—É–¥: {stage['answers']}"
                )

                user_context[chat_id].append({"role": "user", "content": summary_prompt})
                completion = openai.ChatCompletion.create(
                    model="gpt-4-turbo",  # GPT-4 –∏–ª“Ø“Ø –Ω–∞—Ä–∏–π–≤—á–ª–∞–ª—Ç–∞–π
                    messages=user_context[chat_id],
                    temperature=0.7
                )
                result = completion.choices[0].message["content"]

                bot.send_message(chat_id, "‚úÖ –®–∞–ª–≥–∞–ª—Ç –¥—É—É—Å–ª–∞–∞!\n\nüéì –¢“Ø–≤—à–∏–Ω –±–∞ —Ç”©–ª”©–≤–ª”©–≥”©”©:\n\n" + result)

            except Exception:
                bot.send_message(chat_id, "‚ö†Ô∏è AI —Å–µ—Ä–≤–µ—Ä—Ç—ç–π —Ö–æ–ª–±–æ–≥–¥–æ—Ö–æ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –¢“Ø—Ä —Ö“Ø–ª—ç—ç–≥—ç—ç–¥ –¥–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–æ—Ä–æ–π.")

            # state reset
            user_stage.pop(chat_id)
        return

    # -------------------------
    # üí¨ AI –ë–ê–ì–®–ò–ô–ù –•–ê–†–ò–£–õ–¢ (Speaking / Vocab / Learning)
    # -------------------------
    if intent in ["speaking", "learn_english", "vocab"]:
        try:
            user_context[chat_id].append({"role": "user", "content": user_input})
            completion = openai.ChatCompletion.create(
                model="gpt-4-turbo",
                messages=user_context[chat_id],
                temperature=0.8
            )
            reply = completion.choices[0].message["content"]
            user_context[chat_id].append({"role": "assistant", "content": reply})
        except Exception:
            reply = "‚ö†Ô∏è AI —Å–µ—Ä–≤–µ—Ä—Ç—ç–π —Ö–æ–ª–±–æ–≥–¥–æ—Ö–æ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞."
    elif intent == "greeting":
        reply = RESPONSE_GREETING
    else:
        reply = RESPONSE_FALLBACK

    bot.send_message(chat_id, reply)

# -------------------------
# BOT START
# -------------------------
if __name__ == "__main__":
    print("ü§ñ Eduhub AI Teacher is running...")
    bot.infinity_polling()
