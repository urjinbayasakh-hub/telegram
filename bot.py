import os
import openai
import telebot
from dotenv import load_dotenv
from datetime import datetime, timedelta
import threading
import time

# -------------------------
# –¢–û–•–ò–†–ì–û–û
# -------------------------
load_dotenv("bot.env")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = telebot.TeleBot(TELEGRAM_TOKEN)
openai.api_key = OPENAI_API_KEY

# -------------------------
# CONTEXT, STATE
# -------------------------
user_context = {}  # —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —á–∞—Ç —Ç“Ø“Ø—Ö
user_stage = {}    # —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —à–∞—Ç
subscribed_users = set()  # ”©–¥”©—Ä –±“Ø—Ä–∏–π–Ω —Ö–∏—á—ç—ç–ª –∞–≤–∞—Ö —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥

# -------------------------
# INTENT DETECTION
# -------------------------
def detect_intent(txt):
    t = txt.lower()

    if any(x in t for x in ["—Å–∞–π–Ω —É—É", "sain uu", "hi", "hello"]):
        return "greeting"
    if any(x in t for x in ["3", "—Ç“Ø–≤—à–∏–Ω", "placement", "exam", "test"]):
        return "placement_test"
    if "translate" in t or "–æ—Ä—á—É—É–ª" in t:
        return "translate"
    if "–∂–∏—à—ç—ç" in t or "example" in t:
        return "example_request"
    if any(x in t for x in ["–∞–ª–¥–∞–∞", "–∑–∞—Å", "grammar", "correct", "fix"]):
        return "correction"
    if any(x in t for x in ["—Ç–µ—Å—Ç", "—à–∞–ª–≥–∞–ª—Ç", "quiz"]):
        return "quiz"
    if any(x in t for x in ["subscribe", "”©–¥”©—Ä –±“Ø—Ä", "day lesson"]):
        return "subscribe"
    if "unsubscribe" in t:
        return "unsubscribe"
    if any(x in t for x in ["speaking", "—è—Ä–∏—Ö", "—è—Ä—å–∂", "–≥–æ–≤–æ—Ä–∏—Ç—å"]):
        return "speaking"
    if any(x in t for x in ["“Ø–≥", "vocab", "vocabulary", "“Ø–≥ —Ü—ç—ç–∂"]):
        return "vocab"
    return "fallback"

# -------------------------
# READY TEXTS
# -------------------------
RESPONSE_GREETING = (
    "–°–∞–π–Ω —É—É! üëã –ë–∏ AI –∞–Ω–≥–ª–∏ —Ö—ç–ª–Ω–∏–π –±–∞–≥—à –±–∞–π–Ω–∞.\n\n"
    "–Æ—É —Ö–∏–π—Ö –≤—ç? üëá\n"
    "1Ô∏è‚É£ “Æ–≥ —Ü—ç—ç–∂–ª—ç—Ö\n"
    "2Ô∏è‚É£ –Ø—Ä–∏–∞–Ω—ã –¥–∞–¥–ª–∞–≥–∞\n"
    "3Ô∏è‚É£ –¢“Ø–≤—à–∏–Ω —Ç–æ–≥—Ç–æ–æ—Ö —à–∞–ª–≥–∞–ª—Ç\n"
    "4Ô∏è‚É£ –ú–æ–Ω–≥–æ–ª ‚Üî –ê–Ω–≥–ª–∏ –æ—Ä—á—É—É–ª–≥–∞\n"
    "5Ô∏è‚É£ ”®–¥”©—Ä –±“Ø—Ä–∏–π–Ω AI —Ö–∏—á—ç—ç–ª (subscribe)\n"
    "–°–æ–Ω–≥–æ–ª—Ç–æ–æ –±–∏—á—ç—ç—Ä—ç–π (–∂–∏—à—ç—ç: 3)"
)

RESPONSE_FALLBACK = (
    "–ë–∏ —Ç—É—Å–ª–∞—Ö–∞–¥ –±—ç–ª—ç–Ω –±–∞–π–Ω–∞ üòä\n"
    "–¢–∞ —é—É —Ö–∏–π—Ö–∏–π–≥ —Ö“Ø—Å—ç–∂ –±–∞–π–Ω–∞ –≤—ç?\n"
    "1Ô∏è‚É£ “Æ–≥ —Ü—ç—ç–∂–ª—ç—Ö\n"
    "2Ô∏è‚É£ –Ø—Ä–∏–∞–Ω—ã –¥–∞–¥–ª–∞–≥–∞\n"
    "3Ô∏è‚É£ –¢“Ø–≤—à–∏–Ω —Ç–æ–≥—Ç–æ–æ—Ö —à–∞–ª–≥–∞–ª—Ç\n"
    "4Ô∏è‚É£ –ú–æ–Ω–≥–æ–ª ‚Üî –ê–Ω–≥–ª–∏ –æ—Ä—á—É—É–ª–≥–∞"
)

# -------------------------
# DAILY LESSON THREAD
# -------------------------
def send_daily_lessons():
    while True:
        now = datetime.now()
        if now.hour == 8 and now.minute == 0:  # ”©–≥–ª”©”© 08:00 –±“Ø—Ä—Ç –∏–ª–≥—ç—ç–Ω—ç
            for chat_id in subscribed_users:
                try:
                    prompt = "Create a short English lesson (vocabulary + sentence + exercise) for a Mongolian learner."
                    completion = openai.ChatCompletion.create(
                        model="gpt-4-turbo",
                        messages=[{"role": "system", "content": prompt}],
                        temperature=0.8
                    )
                    lesson = completion.choices[0].message["content"]
                    bot.send_message(chat_id, "üåÖ ”®–≥–ª”©”©–Ω–∏–π AI —Ö–∏—á—ç—ç–ª:\n\n" + lesson)
                except Exception:
                    pass
        time.sleep(60)

threading.Thread(target=send_daily_lessons, daemon=True).start()

# -------------------------
# LEVEL TEST QUESTIONS
# -------------------------
LEVEL_QUESTIONS = [
    "1Ô∏è‚É£ What time do you usually wake up?",
    "2Ô∏è‚É£ Complete this sentence: 'If I had more time, I ______.'",
    "3Ô∏è‚É£ Translate this: '–ë–∏ ”©–¥”©—Ä –±“Ø—Ä –∞–Ω–≥–ª–∏ —Ö—ç–ª —Å—É—Ä–¥–∞–≥.'",
    "4Ô∏è‚É£ Which is correct: 'He go to work' or 'He goes to work'?",
    "5Ô∏è‚É£ Write one short sentence about your favorite hobby."
]

# -------------------------
# MAIN HANDLER
# -------------------------
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.from_user.is_bot:
        return
    chat_id = message.chat.id
    user_input = message.text.strip()
    intent = detect_intent(user_input)

    # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω context —ç—Ö–ª“Ø“Ø–ª—ç—Ö
    if chat_id not in user_context:
        user_context[chat_id] = [
            {"role": "system", "content": (
                "–¢–∞ –∞–Ω–≥–ª–∏ —Ö—ç–ª —Å—É—Ä–∞–≥—á–¥–∞–¥ —Ç—É—Å–∞–ª–¥–∞–≥ AI –±–∞–≥—à. "
                "–•–∞—Ä–∏—É–ª—Ç —á–∏–Ω—å –æ–π–ª–≥–æ–º–∂—Ç–æ–π, –Ω–∞–π—Ä—Å–∞–≥, —Ç–æ–≤—á, –∑–∞–∞–≤–∞—Ä–ª–∞–≥ –±–∞–π—Ö —ë—Å—Ç–æ–π. "
                "–ú–æ–Ω–≥–æ–ª —Ö—ç–ª—ç—ç—Ä —Ç–∞–π–ª–±–∞—Ä —Ö–∏–π–∂, –∞–Ω–≥–ª–∏ –∂–∏—à—ç—ç ”©–≥“Ø“Ø–ª–±—ç—Ä –æ—Ä—É—É–ª."
            )}
        ]

    # -------- 1. DAILY LESSON SUBSCRIPTION --------
    if intent == "subscribe":
        subscribed_users.add(chat_id)
        bot.send_message(chat_id, "üéØ –¢–∞ ”©–¥”©—Ä –±“Ø—Ä–∏–π–Ω AI —Ö–∏—á—ç—ç–ª —Ö“Ø–ª—ç—ç–Ω –∞–≤–∞—Ö–∞–¥ –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç!")
        return
    if intent == "unsubscribe":
        subscribed_users.discard(chat_id)
        bot.send_message(chat_id, "‚ùå –¢–∞ ”©–¥”©—Ä –±“Ø—Ä–∏–π–Ω —Ö–∏—á—ç—ç–ª—ç—ç—Å —Ö–∞—Å–∞–≥–¥–ª–∞–∞.")
        return

    # -------- 2. TRANSLATION --------
    if intent == "translate":
        try:
            direction = "Mongolian to English" if any(" " in user_input and all('\u0400' <= c <= '\u04FF' or c == ' ' for c in user_input)) else "English to Mongolian"
            completion = openai.ChatCompletion.create(
                model="gpt-4-turbo",
                messages=[
                    {"role": "system", "content": f"Translate between {direction}. Keep meaning accurate and natural."},
                    {"role": "user", "content": user_input}
                ]
            )
            reply = completion.choices[0].message["content"]
        except Exception:
            reply = "‚ö†Ô∏è –û—Ä—á—É—É–ª–≥–∞ —Ö–∏–π—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞."
        bot.send_message(chat_id, reply)
        return

    # -------- 3. PLACEMENT TEST --------
    if intent == "placement_test":
        user_stage[chat_id] = {"mode": "placement", "q_index": 0, "answers": []}
        bot.send_message(chat_id, "üéØ –¢“Ø–≤—à–∏–Ω–≥ —á–∏–Ω—å —à–∞–ª–≥–∞—è.\n5 –∞—Å—É—É–ª—Ç–∞–¥ –∞–Ω–≥–ª–∏–∞—Ä —Ö–∞—Ä–∏—É–ª–∞–∞—Ä–∞–π!\n")
        bot.send_message(chat_id, LEVEL_QUESTIONS[0])
        return

    # -------- 4. PLACEMENT TEST ANSWERS --------
    if chat_id in user_stage and user_stage[chat_id].get("mode") == "placement":
        stage = user_stage[chat_id]
        stage["answers"].append(user_input)
        stage["q_index"] += 1

        if stage["q_index"] < len(LEVEL_QUESTIONS):
            bot.send_message(chat_id, LEVEL_QUESTIONS[stage["q_index"]])
        else:
            try:
                summary_prompt = (
                    "Analyze student's English level (A1‚ÄìC1) and create a custom 7-day learning plan "
                    "with vocabulary, grammar focus, and practice ideas. "
                    f"Answers: {stage['answers']}"
                )
                completion = openai.ChatCompletion.create(
                    model="gpt-4-turbo",
                    messages=[{"role": "system", "content": summary_prompt}],
                    temperature=0.7
                )
                result = completion.choices[0].message["content"]
                bot.send_message(chat_id, "‚úÖ –®–∞–ª–≥–∞–ª—Ç –¥—É—É—Å–ª–∞–∞!\n\n" + result)
            except Exception:
                bot.send_message(chat_id, "‚ö†Ô∏è AI –¥“Ø–≥–Ω—ç–ª—Ç —Ö–∏–π—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.")
            user_stage.pop(chat_id)
        return

    # -------- 5. EXAMPLE REQUEST / GRAMMAR CORRECTION / QUIZ --------
    if intent in ["example_request", "correction", "quiz", "speaking", "vocab", "learn_english"]:
        try:
            context_prompt = {
                "example_request": "Generate clear example sentences on this topic with Mongolian translations.",
                "correction": "Correct grammar errors and explain in Mongolian.",
                "quiz": "Create a short 3-question quiz from the latest vocabulary or grammar concept. Provide correct answers with explanations.",
                "speaking": "Give a speaking exercise and follow-up question for practice.",
                "vocab": "Teach 5 useful words with meaning, part of speech, and example sentences.",
                "learn_english": "Give short lesson with vocabulary, grammar point, and practice question."
            }
            prompt = context_prompt[intent]
            completion = openai.ChatCompletion.create(
                model="gpt-4-turbo",
                messages=[
                    {"role": "system", "content": prompt},
                    {"role": "user", "content": user_input}
                ],
                temperature=0.8
            )
            reply = completion.choices[0].message["content"]
        except Exception:
            reply = "‚ö†Ô∏è AI –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞–ª—Ç –∞–º–∂–∏–ª—Ç–≥“Ø–π –±–æ–ª–ª–æ–æ."
        bot.send_message(chat_id, reply)
        return

    # -------- 6. DEFAULT / GREETING --------
    if intent == "greeting":
        reply = RESPONSE_GREETING
    else:
        reply = RESPONSE_FALLBACK
    bot.send_message(chat_id, reply)

# -------------------------
# BOT START
# -------------------------
if __name__ == "__main__":
    print("ü§ñ Eduhub AI Teacher v2.0 is running...")
    bot.infinity_polling()
