import os
import openai
import telebot
from dotenv import load_dotenv
from datetime import datetime
import threading
import time

# -------------------------
# –¢–û–•–ò–†–ì–û–û
# -------------------------
load_dotenv("bot.env")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = telebot.TeleBot(TELEGRAM_TOKEN)
openai.api_key = OPENAI_API_KEY

# -------------------------
# GLOBAL STATES
# -------------------------
user_context = {}
user_stage = {}
user_profile = {}
last_message_sent = {}

# -------------------------
# MESSAGE DUPLICATE PROTECTOR
# -------------------------
def safe_send(chat_id, text):
    """Prevent sending duplicate messages"""
    if last_message_sent.get(chat_id) != text:
        bot.send_message(chat_id, text)
        last_message_sent[chat_id] = text

# -------------------------
# INITIALIZER
# -------------------------
def ensure_user(chat_id):
    if chat_id not in user_context:
        user_context[chat_id] = [
            {"role": "system", "content": (
                "You are an encouraging English teacher for Mongolian learners. "
                "Respond clearly, kindly, and in mixed Mongolian + English. "
                "Always motivate the learner to study every day a little bit."
            )}
        ]
    if chat_id not in user_profile:
        user_profile[chat_id] = {
            "goal": None,
            "level": None,
            "last_topic": None,
            "last_updated": None
        }

# -------------------------
# LEVEL TEST QUESTIONS
# -------------------------
LEVEL_QUESTIONS = [
    "1Ô∏è‚É£ What time do you usually wake up?",
    "2Ô∏è‚É£ Complete this sentence: 'If I had more time, I ______.'",
    "3Ô∏è‚É£ Translate this: '–ë–∏ ”©–¥”©—Ä –±“Ø—Ä –∞–Ω–≥–ª–∏ —Ö—ç–ª —Å—É—Ä–¥–∞–≥.'",
    "4Ô∏è‚É£ Which is correct: 'He go to work' or 'He goes to work'?",
    "5Ô∏è‚É£ Write one short sentence about your favorite hobby."
]

# -------------------------
# INTENT DETECTION
# -------------------------
def detect_intent(txt):
    t = txt.lower()
    if any(x in t for x in ["—Å–∞–π–Ω —É—É", "hi", "hello", "hey"]):
        return "greeting"
    if any(x in t for x in ["3", "—Ç“Ø–≤—à–∏–Ω", "placement", "exam", "test"]):
        return "placement_test"
    if "—Å—É—Ä–º–∞–∞—Ä" in t or "i want" in t or "—Ö“Ø—Å—ç–∂ –±–∞–π–Ω–∞" in t:
        return "goal_response"
    if any(x in t for x in ["“Ø–≥", "vocab", "vocabulary"]):
        return "vocab"
    if any(x in t for x in ["—è—Ä–∏—Ö", "speaking"]):
        return "speaking"
    return "fallback"

# -------------------------
# MAIN HANDLER
# -------------------------
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.from_user.is_bot:
        return

    chat_id = message.chat.id
    text = message.text.strip()
    intent = detect_intent(text)
    ensure_user(chat_id)

    # -------------------------
    # GREETING
    # -------------------------
    if intent == "greeting":
        safe_send(chat_id,
            "–°–∞–π–Ω —É—É! üëã –ë–∏ —á–∏–Ω–∏–π AI –∞–Ω–≥–ª–∏ —Ö—ç–ª–Ω–∏–π –±–∞–≥—à –±–∞–π–Ω–∞.\n\n"
            "–Æ—É —Ö–∏–π—Ö –≤—ç?\n"
            "1Ô∏è‚É£ “Æ–≥ —Ü—ç—ç–∂–ª—ç—Ö\n"
            "2Ô∏è‚É£ –Ø—Ä–∏–∞–Ω—ã –¥–∞–¥–ª–∞–≥–∞\n"
            "3Ô∏è‚É£ –¢“Ø–≤—à–∏–Ω —Ç–æ–≥—Ç–æ–æ—Ö —à–∞–ª–≥–∞–ª—Ç (3 –≥—ç–∂ –±–∏—á—ç—ç—Ä—ç–π)\n\n"
            "–ë—ç–ª—Ç–≥—ç–ª—Ç—ç–π –±–∞–π–Ω–∞ —É—É? üòé"
        )
        return

    # -------------------------
    # LEVEL TEST START
    # -------------------------
    if intent == "placement_test":
        user_stage[chat_id] = {"mode": "placement", "q_index": 0, "answers": []}
        safe_send(chat_id, "üéØ –¢“Ø–≤—à–∏–Ω–≥ —á–∏–Ω—å —à–∞–ª–≥–∞—è! 5 –∞—Å—É—É–ª—Ç–∞–¥ –∞–Ω–≥–ª–∏–∞—Ä —Ö–∞—Ä–∏—É–ª–∞–∞—Ä–∞–π üëá")
        safe_send(chat_id, LEVEL_QUESTIONS[0])
        return

    # -------------------------
    # LEVEL TEST PROGRESS
    # -------------------------
    if chat_id in user_stage and user_stage[chat_id].get("mode") == "placement":
        stage = user_stage[chat_id]
        stage["answers"].append(text)
        stage["q_index"] += 1

        # –¥–∞—Ä–∞–∞–≥–∏–π–Ω –∞—Å—É—É–ª—Ç –±–∞–π–≥–∞–∞ –±–æ–ª
        if stage["q_index"] < len(LEVEL_QUESTIONS):
            safe_send(chat_id, LEVEL_QUESTIONS[stage["q_index"]])
        else:
            safe_send(chat_id, "üïì –¢“Ø–≤—à–∏–Ω–≥ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∂ –±–∞–π–Ω–∞... —Ç“Ø—Ä —Ö“Ø–ª—ç—ç–Ω—ç “Ø“Ø.")

            # AI –¥“Ø–≥–Ω—ç–ª—Ç
            try:
                prompt = (
                    "You are an English teacher for a Mongolian student.\n"
                    "Evaluate the answers below to determine their CEFR level (A1‚ÄìC1). "
                    "Then explain the result in Mongolian clearly, with encouragement. "
                    "After giving the result, ask them what they want to focus on next (grammar, speaking, vocabulary, writing, etc.).\n"
                    f"Answers: {stage['answers']}"
                )

                completion = openai.ChatCompletion.create(
                    model="gpt-4-turbo",
                    messages=[{"role": "system", "content": prompt}],
                    temperature=0.7
                )
                result = completion.choices[0].message["content"]

                safe_send(chat_id, "‚úÖ –®–∞–ª–≥–∞–ª—Ç –¥—É—É—Å–ª–∞–∞!\n\n" + result)

                user_profile[chat_id]["level"] = result.split()[0]
                user_profile[chat_id]["last_topic"] = "placement_result"
                user_profile[chat_id]["last_updated"] = datetime.now().isoformat()

                safe_send(chat_id, "üß† –û–¥–æ–æ —á–∏ —é—É —Å—É—Ä–º–∞–∞—Ä –±–∞–π–Ω–∞? (–∂–∏—à—ç—ç –Ω—å: '—è—Ä–∏–∞–Ω—ã —á–∞–¥–≤–∞—Ä–∞–∞ —Å–∞–π–∂—Ä—É—É–ª–∞—Ö', '“Ø–≥ —Ü—ç—ç–∂–ª—ç—Ö', 'IELTS –±—ç–ª–¥—ç—Ö')")
            except Exception:
                safe_send(chat_id, "‚ö†Ô∏è AI-–¥ —Ö–æ–ª–±–æ–≥–¥–æ—Ö–æ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –¢“Ø—Ä —Ö“Ø–ª—ç—ç–≥—ç—ç–¥ –¥–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–æ—Ä–æ–π.")
            user_stage.pop(chat_id)
        return

    # -------------------------
    # GOAL RESPONSE ‚Üí Personalized Lesson
    # -------------------------
    if intent == "goal_response":
        safe_send(chat_id, "üïì –•–∏—á—ç—ç–ª –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∂ –±–∞–π–Ω–∞... —Ç“Ø—Ä —Ö“Ø–ª—ç—ç–Ω—ç “Ø“Ø.")
        try:
            goal = text
            user_profile[chat_id]["goal"] = goal
            level = user_profile[chat_id].get("level", "A2")

            prompt = (
                f"The student is level {level}. They said their goal: {goal}. "
                "Create a personalized short lesson with:\n"
                "- A warm greeting in Mongolian\n"
                "- 3 key vocabulary words with English + Mongolian meaning + example sentence\n"
                "- 1 grammar point (simple but clear)\n"
                "- 1 short speaking task\n"
                "Always end by saying:\n"
                "'–û–¥–æ–æ –±–∞–π–≥–∞–∞ —Ç“Ø–≤—à–Ω—ç—ç—Å—ç—ç –∏–ª“Ø“Ø —Å–∞–π–∂—Ä–∞—Ö—ã–Ω —Ç—É–ª–¥ ”©–¥”©—Ä –±“Ø—Ä –±–∞–≥–∞ –±–∞–≥–∞–∞—Ä –¥–∞–≤—Ç–≤–∞–ª –∏–ª“Ø“Ø “Ø—Ä –¥“Ø–Ω—Ç—ç–π —à“Ø“Ø üí™'"
            )

            completion = openai.ChatCompletion.create(
                model="gpt-4-turbo",
                messages=[{"role": "system", "content": prompt}],
                temperature=0.8
            )

            lesson = completion.choices[0].message["content"]
            safe_send(chat_id, "üìò –¢–∞–Ω–∏–π —Ö—É–≤–∏–π–Ω —Ö–∏—á—ç—ç–ª –±—ç–ª—ç–Ω –±–æ–ª–ª–æ–æ:\n\n" + lesson)

            user_profile[chat_id]["last_topic"] = "custom_lesson"
            user_profile[chat_id]["last_updated"] = datetime.now().isoformat()
        except Exception:
            safe_send(chat_id, "‚ö†Ô∏è –•–∏—á—ç—ç–ª –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.")
        return

    # -------------------------
    # VOCAB / SPEAKING REQUESTS
    # -------------------------
    if intent in ["vocab", "speaking"]:
        topic = "Speaking" if intent == "speaking" else "Vocabulary"
        safe_send(chat_id, f"üïì {topic} —Ö–∏—á—ç—ç–ª –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∂ –±–∞–π–Ω–∞...")
        try:
            completion = openai.ChatCompletion.create(
                model="gpt-4-turbo",
                messages=[{"role": "system", "content": f"Create a short {topic} practice lesson for Mongolian learners."}],
                temperature=0.8
            )
            reply = completion.choices[0].message["content"]
            safe_send(chat_id, f"üéØ {topic} —Ö–∏—á—ç—ç–ª:\n\n" + reply)
            safe_send(chat_id, "üí° –°–∞–Ω—É—É–ª–≥–∞: ”©–¥”©—Ä –±“Ø—Ä –±–∞–≥–∞ –±–∞–≥–∞–∞—Ä –¥–∞–≤—Ç–≤–∞–ª –∏–ª“Ø“Ø “Ø—Ä –¥“Ø–Ω—Ç—ç–π —à“Ø“Ø üí™")
        except Exception:
            safe_send(chat_id, "‚ö†Ô∏è –•–∏—á—ç—ç–ª –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.")
        return

    # -------------------------
    # FALLBACK
    # -------------------------
    safe_send(chat_id,
        "–ë–∏ —Ç—É—Å–ª–∞—Ö–∞–¥ –±—ç–ª—ç–Ω –±–∞–π–Ω–∞ üòä\n"
        "–¢–∞ —é—É —Ö“Ø—Å—ç–∂ –±–∞–π–Ω–∞ –≤—ç?\n"
        "1Ô∏è‚É£ “Æ–≥ —Ü—ç—ç–∂–ª—ç—Ö\n"
        "2Ô∏è‚É£ –Ø—Ä–∏–∞–Ω—ã –¥–∞–¥–ª–∞–≥–∞\n"
        "3Ô∏è‚É£ –¢“Ø–≤—à–∏–Ω —Ç–æ–≥—Ç–æ–æ—Ö —à–∞–ª–≥–∞–ª—Ç"
    )

# -------------------------
# START BOT
# -------------------------
if __name__ == "__main__":
    print("ü§ñ Eduhub AI Teacher v5.0 running...")
    bot.infinity_polling()
